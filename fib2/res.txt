🎯 Demo of New fib2 APIs
========================


🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 64×80
   📝 Writing Miden trace to fib_5_trace_miden.log...
   ✅ Miden trace written to fib_5_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 64×80 -> 64×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 64×80
   📈 Conversion stats:
      Original height: 64
      Padded height: 64 (2^6)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_5_trace_p3.log...
   ✅ Plonky3 trace written to fib_5_trace_p3.log
========================
   Using P3 trace (64×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 64×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................10.520µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................237.471µs
··Start:   Step 2: Compute quotient polynomial
Trace domain: 64, Quotient domain: 64
····End:     Step 2: Compute quotient polynomial ...................................17.543µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................48.330µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................441ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................51.686µs
······Start:   proof of work
········End:     proof of work .....................................................891ns
······Start:   query phase
········End:     query phase .......................................................155.298µs
······End:     Produce FRI proof ...................................................223.886µs
····End:     Step 5: Open polynomials ..............................................304.236µs
··End:     Total proof generation ..................................................645.569µs
   • Proof generated in 0.00s

✅ Verifying proof...
   • Verification completed in 1ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (64×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................8.165µs
····Start:   Step 1: Commit to execution trace
lde domain size: 512
······End:     Step 1: Commit to execution trace ...................................1.435ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................219.849µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................248.352µs
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................147.174µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................21.690µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................28.914µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.625ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................26.560µs
····End:     Total proof generation ................................................3.808ms
··End:     Miden STARK proof generation ............................................3.927ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 3.932235ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................177.871µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 182.619µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 64×80
   📝 Writing Miden trace to fib_10_trace_miden.log...
   ✅ Miden trace written to fib_10_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 64×80 -> 64×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 64×80
   📈 Conversion stats:
      Original height: 64
      Padded height: 64 (2^6)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_10_trace_p3.log...
   ✅ Plonky3 trace written to fib_10_trace_p3.log
========================
   Using P3 trace (64×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 64×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................2.013µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................189.853µs
··Start:   Step 2: Compute quotient polynomial
Trace domain: 64, Quotient domain: 64
····End:     Step 2: Compute quotient polynomial ...................................15.048µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................46.987µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................431ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................49.742µs
······Start:   proof of work
········End:     proof of work .....................................................871ns
······Start:   query phase
········End:     query phase .......................................................78.045µs
······End:     Produce FRI proof ...................................................142.935µs
····End:     Step 5: Open polynomials ..............................................215.961µs
··End:     Total proof generation ..................................................494.649µs
   • Proof generated in 0.00s

✅ Verifying proof...
   • Verification completed in 1ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (64×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................2.355µs
····Start:   Step 1: Commit to execution trace
lde domain size: 512
······End:     Step 1: Commit to execution trace ...................................1.347ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................209.469µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................248.381µs
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................144.187µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................25.798µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................25.368µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................2.210ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................20.157µs
····End:     Total proof generation ................................................4.275ms
··End:     Miden STARK proof generation ............................................4.367ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 4.37083ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................122.698µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 127.377µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 128×80
   📝 Writing Miden trace to fib_20_trace_miden.log...
   ✅ Miden trace written to fib_20_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 128×80 -> 128×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 128×80
   📈 Conversion stats:
      Original height: 128
      Padded height: 128 (2^7)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_20_trace_p3.log...
   ✅ Plonky3 trace written to fib_20_trace_p3.log
========================
   Using P3 trace (128×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 128×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................3.827µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................405.894µs
··Start:   Step 2: Compute quotient polynomial
Trace domain: 128, Quotient domain: 128
····End:     Step 2: Compute quotient polynomial ...................................27.271µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................92.021µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................431ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................96.409µs
······Start:   proof of work
········End:     proof of work .....................................................1.293µs
······Start:   query phase
········End:     query phase .......................................................91.360µs
······End:     Produce FRI proof ...................................................204.239µs
····End:     Step 5: Open polynomials ..............................................326.276µs
··End:     Total proof generation ..................................................881.998µs
   • Proof generated in 0.00s

✅ Verifying proof...
   • Verification completed in 1ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (128×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................4.278µs
····Start:   Step 1: Commit to execution trace
lde domain size: 1024
······End:     Step 1: Commit to execution trace ...................................3.006ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................299.386µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................546.766µs
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................276.032µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................45.124µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................54.521µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................12.918ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................25.968µs
····End:     Total proof generation ................................................17.222ms
··End:     Miden STARK proof generation ............................................17.374ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 17.381028ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................154.848µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 167.12µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 256×80
   📝 Writing Miden trace to fib_40_trace_miden.log...
   ✅ Miden trace written to fib_40_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 256×80 -> 256×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 256×80
   📈 Conversion stats:
      Original height: 256
      Padded height: 256 (2^8)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_40_trace_p3.log...
   ✅ Plonky3 trace written to fib_40_trace_p3.log
========================
   Using P3 trace (256×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 256×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................2.525µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................803.453µs
··Start:   Step 2: Compute quotient polynomial
Trace domain: 256, Quotient domain: 256
····End:     Step 2: Compute quotient polynomial ...................................45.083µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................178.872µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................441ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................180.595µs
······Start:   proof of work
········End:     proof of work .....................................................861ns
······Start:   query phase
········End:     query phase .......................................................95.758µs
······End:     Produce FRI proof ...................................................291.802µs
····End:     Step 5: Open polynomials ..............................................504.528µs
··End:     Total proof generation ..................................................1.561ms
   • Proof generated in 0.00s

✅ Verifying proof...
   • Verification completed in 2ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (256×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................2.275µs
····Start:   Step 1: Commit to execution trace
lde domain size: 2048
······End:     Step 1: Commit to execution trace ...................................6.654ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................486.173µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................1.185ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................526.999µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................96.820µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................118.911µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.205ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................24.596µs
····End:     Total proof generation ................................................10.346ms
··End:     Miden STARK proof generation ............................................10.527ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 10.531684ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................160.969µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 165.608µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 512×80
   📝 Writing Miden trace to fib_80_trace_miden.log...
   ✅ Miden trace written to fib_80_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 512×80 -> 512×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 512×80
   📈 Conversion stats:
      Original height: 512
      Padded height: 512 (2^9)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_80_trace_p3.log...
   ✅ Plonky3 trace written to fib_80_trace_p3.log
========================
   Using P3 trace (512×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 512×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................7.253µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................1.772ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 512, Quotient domain: 512
····End:     Step 2: Compute quotient polynomial ...................................95.037µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................364.998µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................461ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................379.725µs
······Start:   proof of work
········End:     proof of work .....................................................1.623µs
······Start:   query phase
········End:     query phase .......................................................119.171µs
······End:     Produce FRI proof ...................................................521.008µs
····End:     Step 5: Open polynomials ..............................................945.997µs
··End:     Total proof generation ..................................................3.217ms
   • Proof generated in 0.00s

✅ Verifying proof...
   • Verification completed in 2ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (512×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................4.759µs
····Start:   Step 1: Commit to execution trace
lde domain size: 4096
······End:     Step 1: Commit to execution trace ...................................15.257ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................998.275µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................2.713ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................1.105ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................227.573µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................208.648µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.231ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................38.562µs
····End:     Total proof generation ................................................21.842ms
··End:     Miden STARK proof generation ............................................22.143ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 22.149306ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................251.116µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 256.647µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 1024×80
   📝 Writing Miden trace to fib_160_trace_miden.log...
   ✅ Miden trace written to fib_160_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 1024×80 -> 1024×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 1024×80
   📈 Conversion stats:
      Original height: 1024
      Padded height: 1024 (2^10)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_160_trace_p3.log...
   ✅ Plonky3 trace written to fib_160_trace_p3.log
========================
   Using P3 trace (1024×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 1024×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.422µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................3.619ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 1024, Quotient domain: 1024
····End:     Step 2: Compute quotient polynomial ...................................167.301µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................702.786µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................500ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................710.200µs
······Start:   proof of work
········End:     proof of work .....................................................902ns
······Start:   query phase
········End:     query phase .......................................................126.535µs
······End:     Produce FRI proof ...................................................854.909µs
····End:     Step 5: Open polynomials ..............................................1.655ms
··End:     Total proof generation ..................................................6.182ms
   • Proof generated in 0.01s

✅ Verifying proof...
   • Verification completed in 2ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (1024×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................5.460µs
····Start:   Step 1: Commit to execution trace
lde domain size: 8192
······End:     Step 1: Commit to execution trace ...................................32.006ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................1.538ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................5.671ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................2.087ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................467.489µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................402.658µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.429ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................38.342µs
····End:     Total proof generation ................................................43.697ms
··End:     Miden STARK proof generation ............................................44.145ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 44.154726ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................260.194µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 265.534µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 2048×80
   📝 Writing Miden trace to fib_320_trace_miden.log...
   ✅ Miden trace written to fib_320_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 2048×80 -> 2048×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 2048×80
   📈 Conversion stats:
      Original height: 2048
      Padded height: 2048 (2^11)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_320_trace_p3.log...
   ✅ Plonky3 trace written to fib_320_trace_p3.log
========================
   Using P3 trace (2048×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 2048×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.271µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................7.425ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 2048, Quotient domain: 2048
····End:     Step 2: Compute quotient polynomial ...................................333.690µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................1.398ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................491ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................1.392ms
······Start:   proof of work
········End:     proof of work .....................................................932ns
······Start:   query phase
········End:     query phase .......................................................154.658µs
······End:     Produce FRI proof ...................................................1.567ms
····End:     Step 5: Open polynomials ..............................................3.146ms
··End:     Total proof generation ..................................................12.340ms
   • Proof generated in 0.01s

✅ Verifying proof...
   • Verification completed in 3ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (2048×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................5.691µs
····Start:   Step 1: Commit to execution trace
lde domain size: 16384
······End:     Step 1: Commit to execution trace ...................................68.192ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................3.080ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................12.164ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................4.200ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................1.018ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................816.657µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................572.874µs
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................64.420µs
····End:     Total proof generation ................................................90.191ms
··End:     Miden STARK proof generation ............................................91.148ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 91.154337ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................290.600µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 296.17µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 4096×80
   📝 Writing Miden trace to fib_640_trace_miden.log...
   ✅ Miden trace written to fib_640_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 4096×80 -> 4096×80
   ✅ Conversion completed in 1ms
   📏 Plonky3 trace dimensions: 4096×80
   📈 Conversion stats:
      Original height: 4096
      Padded height: 4096 (2^12)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_640_trace_p3.log...
   ✅ Plonky3 trace written to fib_640_trace_p3.log
========================
   Using P3 trace (4096×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 4096×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.021µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................15.539ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 4096, Quotient domain: 4096
····End:     Step 2: Compute quotient polynomial ...................................700.571µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................2.858ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................521ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................2.785ms
······Start:   proof of work
········End:     proof of work .....................................................1.252µs
······Start:   query phase
········End:     query phase .......................................................173.702µs
······End:     Produce FRI proof ...................................................2.979ms
····End:     Step 5: Open polynomials ..............................................6.099ms
··End:     Total proof generation ..................................................25.242ms
   • Proof generated in 0.03s

✅ Verifying proof...
   • Verification completed in 3ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (4096×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................4.679µs
····Start:   Step 1: Commit to execution trace
lde domain size: 32768
······End:     Step 1: Commit to execution trace ...................................148.331ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................6.902ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................27.119ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................8.364ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................2.188ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................1.538ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................8.477ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................81.562µs
····End:     Total proof generation ................................................203.089ms
··End:     Miden STARK proof generation ............................................204.856ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 204.862291ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................327.869µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 332.888µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 8192×80
   📝 Writing Miden trace to fib_1280_trace_miden.log...
   ✅ Miden trace written to fib_1280_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 8192×80 -> 8192×80
   ✅ Conversion completed in 2ms
   📏 Plonky3 trace dimensions: 8192×80
   📈 Conversion stats:
      Original height: 8192
      Padded height: 8192 (2^13)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_1280_trace_p3.log...
   ✅ Plonky3 trace written to fib_1280_trace_p3.log
========================
   Using P3 trace (8192×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 8192×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.913µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................32.116ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 8192, Quotient domain: 8192
····End:     Step 2: Compute quotient polynomial ...................................1.386ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................5.924ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................772ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................5.518ms
······Start:   proof of work
········End:     proof of work .....................................................1.723µs
······Start:   query phase
········End:     query phase .......................................................200.923µs
······End:     Produce FRI proof ...................................................5.743ms
····End:     Step 5: Open polynomials ..............................................11.958ms
··End:     Total proof generation ..................................................51.442ms
   • Proof generated in 0.05s

✅ Verifying proof...
   • Verification completed in 4ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (8192×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................5.961µs
····Start:   Step 1: Commit to execution trace
lde domain size: 65536
······End:     Step 1: Commit to execution trace ...................................319.168ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................13.894ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................59.785ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................18.935ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................4.677ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................3.114ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................757.187µs
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................93.674µs
····End:     Total proof generation ................................................420.535ms
··End:     Miden STARK proof generation ............................................424.228ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 424.236251ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................354.719µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 360.239µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 16384×80
   📝 Writing Miden trace to fib_2560_trace_miden.log...
   ✅ Miden trace written to fib_2560_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 16384×80 -> 16384×80
   ✅ Conversion completed in 3ms
   📏 Plonky3 trace dimensions: 16384×80
   📈 Conversion stats:
      Original height: 16384
      Padded height: 16384 (2^14)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_2560_trace_p3.log...
   ✅ Plonky3 trace written to fib_2560_trace_p3.log
========================
   Using P3 trace (16384×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 16384×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.422µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................67.782ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 16384, Quotient domain: 16384
····End:     Step 2: Compute quotient polynomial ...................................2.796ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................11.311ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................511ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................10.927ms
······Start:   proof of work
········End:     proof of work .....................................................842ns
······Start:   query phase
········End:     query phase .......................................................218.215µs
······End:     Produce FRI proof ...................................................11.166ms
····End:     Step 5: Open polynomials ..............................................23.518ms
··End:     Total proof generation ..................................................105.464ms
   • Proof generated in 0.11s

✅ Verifying proof...
   • Verification completed in 4ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (16384×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................4.578µs
····Start:   Step 1: Commit to execution trace
lde domain size: 131072
······End:     Step 1: Commit to execution trace ...................................670.777ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................26.984ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................125.224ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................40.136ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................10.069ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................6.269ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................108.010µs
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................109.794µs
····End:     Total proof generation ................................................879.795ms
··End:     Miden STARK proof generation ............................................889.941ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 889.947523ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................374.306µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 379.406µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 32768×80
   📝 Writing Miden trace to fib_5120_trace_miden.log...
   ✅ Miden trace written to fib_5120_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 32768×80 -> 32768×80
   ✅ Conversion completed in 14ms
   📏 Plonky3 trace dimensions: 32768×80
   📈 Conversion stats:
      Original height: 32768
      Padded height: 32768 (2^15)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_5120_trace_p3.log...
   ✅ Plonky3 trace written to fib_5120_trace_p3.log
========================
   Using P3 trace (32768×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 32768×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.983µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................157.487ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 32768, Quotient domain: 32768
····End:     Step 2: Compute quotient polynomial ...................................9.540ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................22.732ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................1.022µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................21.976ms
······Start:   proof of work
········End:     proof of work .....................................................1.162µs
······Start:   query phase
········End:     query phase .......................................................246.628µs
······End:     Produce FRI proof ...................................................22.245ms
····End:     Step 5: Open polynomials ..............................................46.867ms
··End:     Total proof generation ..................................................236.696ms
   • Proof generated in 0.24s

✅ Verifying proof...
   • Verification completed in 5ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (32768×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................5.390µs
····Start:   Step 1: Commit to execution trace
lde domain size: 262144
······End:     Step 1: Commit to execution trace ...................................1.462s
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................55.095ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................275.838ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................83.511ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................22.753ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................12.846ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.087ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................2.162ms
····End:     Total proof generation ................................................1.915s
··End:     Miden STARK proof generation ............................................1.938s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 1.938648664s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................485.583µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 491.704µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 65536×80
   📝 Writing Miden trace to fib_10240_trace_miden.log...
   ✅ Miden trace written to fib_10240_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 65536×80 -> 65536×80
   ✅ Conversion completed in 41ms
   📏 Plonky3 trace dimensions: 65536×80
   📈 Conversion stats:
      Original height: 65536
      Padded height: 65536 (2^16)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_10240_trace_p3.log...
   ✅ Plonky3 trace written to fib_10240_trace_p3.log
========================
   Using P3 trace (65536×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 65536×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.953µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................322.869ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 65536, Quotient domain: 65536
····End:     Step 2: Compute quotient polynomial ...................................21.720ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................48.292ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................1.212µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................45.715ms
······Start:   proof of work
········End:     proof of work .....................................................1.032µs
······Start:   query phase
········End:     query phase .......................................................476.176µs
······End:     Produce FRI proof ...................................................46.230ms
····End:     Step 5: Open polynomials ..............................................98.892ms
··End:     Total proof generation ..................................................491.881ms
   • Proof generated in 0.50s

✅ Verifying proof...
   • Verification completed in 5ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (65536×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................5.610µs
····Start:   Step 1: Commit to execution trace
lde domain size: 524288
······End:     Step 1: Commit to execution trace ...................................3.145s
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................108.572ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................582.293ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................157.813ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................46.588ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................24.936ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................7.543ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................3.724ms
····End:     Total proof generation ................................................4.076s
··End:     Miden STARK proof generation ............................................4.112s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 4.112721602s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................478.410µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 483.729µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.
