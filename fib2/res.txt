🎯 Demo of New fib2 APIs
========================


🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 64×80
   📝 Writing Miden trace to fib_5_trace_miden.log...
   ✅ Miden trace written to fib_5_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 64×80 -> 64×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 64×80
   📈 Conversion stats:
      Original height: 64
      Padded height: 64 (2^6)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_5_trace_p3.log...
   ✅ Plonky3 trace written to fib_5_trace_p3.log
========================
   Using P3 trace (64×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 64×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................9.688µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................235.120µs
··Start:   Step 2: Compute quotient polynomial
Trace domain: 64, Quotient domain: 64
····End:     Step 2: Compute quotient polynomial ...................................17.914µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................48.050µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................461ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................56.655µs
······Start:   proof of work
········End:     proof of work .....................................................1.002µs
······Start:   query phase
········End:     query phase .......................................................148.287µs
······End:     Produce FRI proof ...................................................222.125µs
····End:     Step 5: Open polynomials ..............................................300.261µs
··End:     Total proof generation ..................................................639.426µs
   • Proof generated in 0.00s

✅ Verifying proof...
   • Verification completed in 1ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (64×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................9.328µs
····Start:   Step 1: Commit to execution trace
lde domain size: 512
······End:     Step 1: Commit to execution trace ...................................1.441ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................215.523µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................250.499µs
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................151.794µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................22.011µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................25.789µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.626ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................23.464µs
····End:     Total proof generation ................................................3.812ms
··End:     Miden STARK proof generation ............................................3.925ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 3.93074ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................174.777µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 179.726µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................38.131µs
····Start:   Step 1: Commit to execution trace
lde domain size: 512
······End:     Step 1: Commit to execution trace ...................................36.224ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................208.720µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................7.690ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................376.164µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................21.470µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................109.916µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................535.365ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................47.609µs
····End:     Total proof generation ................................................580.140ms
··End:     Miden STARK proof generation ............................................580.269ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 580.275059ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................4.304ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 4.309869ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 64×80
   📝 Writing Miden trace to fib_10_trace_miden.log...
   ✅ Miden trace written to fib_10_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 64×80 -> 64×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 64×80
   📈 Conversion stats:
      Original height: 64
      Padded height: 64 (2^6)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_10_trace_p3.log...
   ✅ Plonky3 trace written to fib_10_trace_p3.log
========================
   Using P3 trace (64×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 64×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................4.448µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................201.928µs
··Start:   Step 2: Compute quotient polynomial
Trace domain: 64, Quotient domain: 64
····End:     Step 2: Compute quotient polynomial ...................................17.994µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................49.502µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................491ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................58.790µs
······Start:   proof of work
········End:     proof of work .....................................................1.062µs
······Start:   query phase
········End:     query phase .......................................................82.805µs
······End:     Produce FRI proof ...................................................158.697µs
····End:     Step 5: Open polynomials ..............................................237.535µs
··End:     Total proof generation ..................................................538.507µs
   • Proof generated in 0.00s

✅ Verifying proof...
   • Verification completed in 1ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (64×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................4.038µs
····Start:   Step 1: Commit to execution trace
lde domain size: 512
······End:     Step 1: Commit to execution trace ...................................1.443ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................216.625µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................256.890µs
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................151.103µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................22.643µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................31.188µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................2.324ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................21.610µs
····End:     Total proof generation ................................................4.521ms
··End:     Miden STARK proof generation ............................................4.613ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 4.617273ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................131.406µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 136.395µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................37.199µs
····Start:   Step 1: Commit to execution trace
lde domain size: 512
······End:     Step 1: Commit to execution trace ...................................37.050ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................218.008µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................7.869ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................394.487µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................22.021µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................109.866µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................196.504ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................41.417µs
····End:     Total proof generation ................................................242.299ms
··End:     Miden STARK proof generation ............................................242.390ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 242.395518ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................4.084ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 4.09106ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 128×80
   📝 Writing Miden trace to fib_20_trace_miden.log...
   ✅ Miden trace written to fib_20_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 128×80 -> 128×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 128×80
   📈 Conversion stats:
      Original height: 128
      Padded height: 128 (2^7)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_20_trace_p3.log...
   ✅ Plonky3 trace written to fib_20_trace_p3.log
========================
   Using P3 trace (128×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 128×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................3.957µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................395.570µs
··Start:   Step 2: Compute quotient polynomial
Trace domain: 128, Quotient domain: 128
····End:     Step 2: Compute quotient polynomial ...................................27.792µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................91.521µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................451ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................97.613µs
······Start:   proof of work
········End:     proof of work .....................................................1.634µs
······Start:   query phase
········End:     query phase .......................................................89.447µs
······End:     Produce FRI proof ...................................................204.553µs
····End:     Step 5: Open polynomials ..............................................328.865µs
··End:     Total proof generation ..................................................873.433µs
   • Proof generated in 0.00s

✅ Verifying proof...
   • Verification completed in 1ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (128×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................3.817µs
····Start:   Step 1: Commit to execution trace
lde domain size: 1024
······End:     Step 1: Commit to execution trace ...................................3.049ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................297.246µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................547.564µs
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................282.237µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................46.226µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................54.222µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................13.127ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................24.325µs
····End:     Total proof generation ................................................17.476ms
··End:     Miden STARK proof generation ............................................17.619ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 17.624516ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................146.684µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 151.504µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................35.927µs
····Start:   Step 1: Commit to execution trace
lde domain size: 1024
······End:     Step 1: Commit to execution trace ...................................73.478ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................315.120µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................15.792ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................529.871µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................47.539µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................222.706µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................855.128ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................54.481µs
····End:     Total proof generation ................................................945.676ms
··End:     Miden STARK proof generation ............................................945.780ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 945.784322ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................4.414ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 4.422309ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 256×80
   📝 Writing Miden trace to fib_40_trace_miden.log...
   ✅ Miden trace written to fib_40_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 256×80 -> 256×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 256×80
   📈 Conversion stats:
      Original height: 256
      Padded height: 256 (2^8)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_40_trace_p3.log...
   ✅ Plonky3 trace written to fib_40_trace_p3.log
========================
   Using P3 trace (256×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 256×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.212µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................884.173µs
··Start:   Step 2: Compute quotient polynomial
Trace domain: 256, Quotient domain: 256
····End:     Step 2: Compute quotient polynomial ...................................51.797µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................180.117µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................471ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................188.282µs
······Start:   proof of work
········End:     proof of work .....................................................1.132µs
······Start:   query phase
········End:     query phase .......................................................107.511µs
······End:     Produce FRI proof ...................................................312.684µs
····End:     Step 5: Open polynomials ..............................................540.110µs
··End:     Total proof generation ..................................................1.691ms
   • Proof generated in 0.00s

✅ Verifying proof...
   • Verification completed in 2ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (256×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................6.121µs
····Start:   Step 1: Commit to execution trace
lde domain size: 2048
······End:     Step 1: Commit to execution trace ...................................6.877ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................526.755µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................1.264ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................568.133µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................102.743µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................129.653µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.310ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................44.773µs
····End:     Total proof generation ................................................10.901ms
··End:     Miden STARK proof generation ............................................11.143ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 11.149719ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................193.142µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 198.552µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................39.664µs
····Start:   Step 1: Commit to execution trace
lde domain size: 2048
······End:     Step 1: Commit to execution trace ...................................149.227ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................551.992µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................30.968ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................809.804µs
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................99.747µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................5.143ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................167.942ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................68.658µs
····End:     Total proof generation ................................................354.944ms
··End:     Miden STARK proof generation ............................................355.254ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 355.260248ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................5.854ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 5.859817ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 512×80
   📝 Writing Miden trace to fib_80_trace_miden.log...
   ✅ Miden trace written to fib_80_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 512×80 -> 512×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 512×80
   📈 Conversion stats:
      Original height: 512
      Padded height: 512 (2^9)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_80_trace_p3.log...
   ✅ Plonky3 trace written to fib_80_trace_p3.log
========================
   Using P3 trace (512×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 512×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................5.160µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................1.779ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 512, Quotient domain: 512
····End:     Step 2: Compute quotient polynomial ...................................88.616µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................357.709µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................471ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................377.917µs
······Start:   proof of work
········End:     proof of work .....................................................1.643µs
······Start:   query phase
········End:     query phase .......................................................208.109µs
······End:     Produce FRI proof ...................................................604.671µs
····End:     Step 5: Open polynomials ..............................................1.033ms
··End:     Total proof generation ..................................................3.292ms
   • Proof generated in 0.00s

✅ Verifying proof...
   • Verification completed in 2ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (512×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................4.759µs
····Start:   Step 1: Commit to execution trace
lde domain size: 4096
······End:     Step 1: Commit to execution trace ...................................14.737ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................846.393µs
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................2.602ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................1.040ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................215.222µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................200.114µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.183ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................35.436µs
····End:     Total proof generation ................................................20.913ms
··End:     Miden STARK proof generation ............................................21.192ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 21.203498ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................236.973µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 245.95µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................37.280µs
····Start:   Step 1: Commit to execution trace
lde domain size: 4096
······End:     Step 1: Commit to execution trace ...................................293.609ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................1.117ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................62.419ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................1.313ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................223.318µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................10.303ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.454s
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................78.918µs
····End:     Total proof generation ................................................1.823s
··End:     Miden STARK proof generation ............................................1.823s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 1.823849381s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................6.737ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 6.744512ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 1024×80
   📝 Writing Miden trace to fib_160_trace_miden.log...
   ✅ Miden trace written to fib_160_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 1024×80 -> 1024×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 1024×80
   📈 Conversion stats:
      Original height: 1024
      Padded height: 1024 (2^10)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_160_trace_p3.log...
   ✅ Plonky3 trace written to fib_160_trace_p3.log
========================
   Using P3 trace (1024×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 1024×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.121µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................3.609ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 1024, Quotient domain: 1024
····End:     Step 2: Compute quotient polynomial ...................................173.585µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................702.053µs
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................491ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................712.813µs
······Start:   proof of work
········End:     proof of work .....................................................1.082µs
······Start:   query phase
········End:     query phase .......................................................118.522µs
······End:     Produce FRI proof ...................................................849.298µs
····End:     Step 5: Open polynomials ..............................................1.648ms
··End:     Total proof generation ..................................................6.172ms
   • Proof generated in 0.01s

✅ Verifying proof...
   • Verification completed in 2ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (1024×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................5.149µs
····Start:   Step 1: Commit to execution trace
lde domain size: 8192
······End:     Step 1: Commit to execution trace ...................................31.376ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................1.641ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................5.819ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................2.098ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................481.240µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................404.316µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.458ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................55.884µs
····End:     Total proof generation ................................................43.399ms
··End:     Miden STARK proof generation ............................................43.906ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 43.912575ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................256.229µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 261.389µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................38.222µs
····Start:   Step 1: Commit to execution trace
lde domain size: 8192
······End:     Step 1: Commit to execution trace ...................................587.848ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................1.899ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................124.829ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................2.344ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................475.930µs
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................24.948ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................52.077ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................87.103µs
····End:     Total proof generation ................................................794.650ms
··End:     Miden STARK proof generation ............................................794.883ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 794.88743ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................7.610ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 7.616483ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 2048×80
   📝 Writing Miden trace to fib_320_trace_miden.log...
   ✅ Miden trace written to fib_320_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 2048×80 -> 2048×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 2048×80
   📈 Conversion stats:
      Original height: 2048
      Padded height: 2048 (2^11)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_320_trace_p3.log...
   ✅ Plonky3 trace written to fib_320_trace_p3.log
========================
   Using P3 trace (2048×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 2048×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.523µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................7.526ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 2048, Quotient domain: 2048
····End:     Step 2: Compute quotient polynomial ...................................373.348µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................1.420ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................531ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................1.435ms
······Start:   proof of work
········End:     proof of work .....................................................1.122µs
······Start:   query phase
········End:     query phase .......................................................152.114µs
······End:     Produce FRI proof ...................................................1.608ms
····End:     Step 5: Open polynomials ..............................................3.228ms
··End:     Total proof generation ..................................................12.591ms
   • Proof generated in 0.01s

✅ Verifying proof...
   • Verification completed in 3ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (2048×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................5.791µs
····Start:   Step 1: Commit to execution trace
lde domain size: 16384
······End:     Step 1: Commit to execution trace ...................................67.625ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................3.411ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................12.525ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................4.233ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................1.047ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................822.518µs
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................584.964µs
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................67.486µs
····End:     Total proof generation ................................................90.402ms
··End:     Miden STARK proof generation ............................................91.303ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 91.309517ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................287.047µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 292.337µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................41.638µs
····Start:   Step 1: Commit to execution trace
lde domain size: 16384
······End:     Step 1: Commit to execution trace ...................................1.196s
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................3.831ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................257.885ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................4.473ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................1.052ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................52.394ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................122.114ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................104.986µs
····End:     Total proof generation ................................................1.638s
··End:     Miden STARK proof generation ............................................1.640s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 1.640406297s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................8.525ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 8.531834ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 4096×80
   📝 Writing Miden trace to fib_640_trace_miden.log...
   ✅ Miden trace written to fib_640_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 4096×80 -> 4096×80
   ✅ Conversion completed in 2ms
   📏 Plonky3 trace dimensions: 4096×80
   📈 Conversion stats:
      Original height: 4096
      Padded height: 4096 (2^12)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_640_trace_p3.log...
   ✅ Plonky3 trace written to fib_640_trace_p3.log
========================
   Using P3 trace (4096×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 4096×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.542µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................16.238ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 4096, Quotient domain: 4096
····End:     Step 2: Compute quotient polynomial ...................................739.743µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................2.914ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................491ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................2.922ms
······Start:   proof of work
········End:     proof of work .....................................................1.342µs
······Start:   query phase
········End:     query phase .......................................................374.460µs
······End:     Produce FRI proof ...................................................3.316ms
····End:     Step 5: Open polynomials ..............................................6.596ms
··End:     Total proof generation ..................................................26.531ms
   • Proof generated in 0.03s

✅ Verifying proof...
   • Verification completed in 3ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (4096×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................5.491µs
····Start:   Step 1: Commit to execution trace
lde domain size: 32768
······End:     Step 1: Commit to execution trace ...................................150.775ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................6.910ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................27.206ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................8.420ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................2.218ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................1.591ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................8.748ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................85.951µs
····End:     Total proof generation ................................................206.051ms
··End:     Miden STARK proof generation ............................................207.666ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 207.672703ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................332.793µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 338.142µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................37.460µs
····Start:   Step 1: Commit to execution trace
lde domain size: 32768
······End:     Step 1: Commit to execution trace ...................................2.362s
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................7.607ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................503.790ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................8.707ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................2.237ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................103.689ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................516.195ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................124.854µs
····End:     Total proof generation ................................................3.505s
··End:     Miden STARK proof generation ............................................3.508s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 3.508431446s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................10.180ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 10.188894ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 8192×80
   📝 Writing Miden trace to fib_1280_trace_miden.log...
   ✅ Miden trace written to fib_1280_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 8192×80 -> 8192×80
   ✅ Conversion completed in 4ms
   📏 Plonky3 trace dimensions: 8192×80
   📈 Conversion stats:
      Original height: 8192
      Padded height: 8192 (2^13)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_1280_trace_p3.log...
   ✅ Plonky3 trace written to fib_1280_trace_p3.log
========================
   Using P3 trace (8192×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 8192×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.191µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................33.566ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 8192, Quotient domain: 8192
····End:     Step 2: Compute quotient polynomial ...................................1.443ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................5.699ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................561ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................5.581ms
······Start:   proof of work
········End:     proof of work .....................................................1.363µs
······Start:   query phase
········End:     query phase .......................................................310.851µs
······End:     Produce FRI proof ...................................................5.919ms
····End:     Step 5: Open polynomials ..............................................12.145ms
··End:     Total proof generation ..................................................52.899ms
   • Proof generated in 0.05s

✅ Verifying proof...
   • Verification completed in 4ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (8192×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................6.822µs
····Start:   Step 1: Commit to execution trace
lde domain size: 65536
······End:     Step 1: Commit to execution trace ...................................326.934ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................13.915ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................59.996ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................18.253ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................4.837ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................3.194ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................783.515µs
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................105.807µs
····End:     Total proof generation ................................................428.126ms
··End:     Miden STARK proof generation ............................................430.999ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 431.005878ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................373.438µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 379.41µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................38.663µs
····Start:   Step 1: Commit to execution trace
lde domain size: 65536
······End:     Step 1: Commit to execution trace ...................................4.742s
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................13.986ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................1.021s
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................17.945ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................4.750ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................213.556ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................312.136ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................139.160µs
····End:     Total proof generation ................................................6.326s
··End:     Miden STARK proof generation ............................................6.332s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 6.332171946s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................10.970ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 10.97617ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 16384×80
   📝 Writing Miden trace to fib_2560_trace_miden.log...
   ✅ Miden trace written to fib_2560_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 16384×80 -> 16384×80
   ✅ Conversion completed in 7ms
   📏 Plonky3 trace dimensions: 16384×80
   📈 Conversion stats:
      Original height: 16384
      Padded height: 16384 (2^14)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_2560_trace_p3.log...
   ✅ Plonky3 trace written to fib_2560_trace_p3.log
========================
   Using P3 trace (16384×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 16384×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.772µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................76.208ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 16384, Quotient domain: 16384
····End:     Step 2: Compute quotient polynomial ...................................4.346ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................12.317ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................661ns
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................12.131ms
······Start:   proof of work
········End:     proof of work .....................................................1.142µs
······Start:   query phase
········End:     query phase .......................................................391.582µs
······End:     Produce FRI proof ...................................................12.545ms
····End:     Step 5: Open polynomials ..............................................26.188ms
··End:     Total proof generation ..................................................119.115ms
   • Proof generated in 0.12s

✅ Verifying proof...
   • Verification completed in 4ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (16384×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................6.332µs
····Start:   Step 1: Commit to execution trace
lde domain size: 131072
······End:     Step 1: Commit to execution trace ...................................699.953ms
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................27.259ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................133.285ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................40.210ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................10.662ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................6.472ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................117.990µs
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................127.609µs
····End:     Total proof generation ................................................918.212ms
··End:     Miden STARK proof generation ............................................926.482ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 926.489371ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................394.568µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 400.109µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................40.165µs
····Start:   Step 1: Commit to execution trace
lde domain size: 131072
······End:     Step 1: Commit to execution trace ...................................9.629s
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................28.270ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................2.047s
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................40.018ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................11.042ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................438.877ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................118.641ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................166.582µs
····End:     Total proof generation ................................................12.313s
··End:     Miden STARK proof generation ............................................12.323s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 12.323836043s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................16.115ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 16.134504ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 32768×80
   📝 Writing Miden trace to fib_5120_trace_miden.log...
   ✅ Miden trace written to fib_5120_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 32768×80 -> 32768×80
   ✅ Conversion completed in 15ms
   📏 Plonky3 trace dimensions: 32768×80
   📈 Conversion stats:
      Original height: 32768
      Padded height: 32768 (2^15)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_5120_trace_p3.log...
   ✅ Plonky3 trace written to fib_5120_trace_p3.log
========================
   Using P3 trace (32768×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 32768×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.492µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................159.556ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 32768, Quotient domain: 32768
····End:     Step 2: Compute quotient polynomial ...................................9.511ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................22.783ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................1.133µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................22.133ms
······Start:   proof of work
········End:     proof of work .....................................................1.212µs
······Start:   query phase
········End:     query phase .......................................................247.674µs
······End:     Produce FRI proof ...................................................22.403ms
····End:     Step 5: Open polynomials ..............................................47.111ms
··End:     Total proof generation ..................................................239.021ms
   • Proof generated in 0.24s

✅ Verifying proof...
   • Verification completed in 5ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (32768×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................9.698µs
····Start:   Step 1: Commit to execution trace
lde domain size: 262144
······End:     Step 1: Commit to execution trace ...................................1.467s
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................54.657ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................271.324ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................79.959ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................22.515ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................12.791ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................1.077ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................1.839ms
····End:     Total proof generation ................................................1.911s
··End:     Miden STARK proof generation ............................................1.930s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 1.930998109s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................471.251µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 476.952µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................40.175µs
····Start:   Step 1: Commit to execution trace
lde domain size: 262144
······End:     Step 1: Commit to execution trace ...................................19.232s
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................54.784ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................4.116s
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................84.134ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................23.776ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................857.149ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................210.828ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................2.288ms
····End:     Total proof generation ................................................24.582s
··End:     Miden STARK proof generation ............................................24.603s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 24.603954907s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................13.494ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 13.503161ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 65536×80
   📝 Writing Miden trace to fib_10240_trace_miden.log...
   ✅ Miden trace written to fib_10240_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 65536×80 -> 65536×80
   ✅ Conversion completed in 40ms
   📏 Plonky3 trace dimensions: 65536×80
   📈 Conversion stats:
      Original height: 65536
      Padded height: 65536 (2^16)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_10240_trace_p3.log...
   ✅ Plonky3 trace written to fib_10240_trace_p3.log
========================
   Using P3 trace (65536×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • P3 trace dimensions: 65536×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................6.532µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................345.657ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 65536, Quotient domain: 65536
····End:     Step 2: Compute quotient polynomial ...................................22.895ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................54.196ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................1.002µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................49.577ms
······Start:   proof of work
········End:     proof of work .....................................................1.272µs
······Start:   query phase
········End:     query phase .......................................................546.022µs
······End:     Produce FRI proof ...................................................50.169ms
····End:     Step 5: Open polynomials ..............................................107.665ms
··End:     Total proof generation ..................................................530.508ms
   • Proof generated in 0.54s

✅ Verifying proof...
   • Verification completed in 5ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (65536×80) for proof generation...
========================

🔐 Miden with blake3.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................7.584µs
····Start:   Step 1: Commit to execution trace
lde domain size: 524288
······End:     Step 1: Commit to execution trace ...................................3.370s
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................111.411ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................611.045ms
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................169.187ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................49.958ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................26.479ms
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................8.155ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................3.072ms
····End:     Total proof generation ................................................4.349s
··End:     Miden STARK proof generation ............................................4.386s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 4.386908204s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................522.559µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 528.97µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🔐 Miden with rpo256.
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··Start:   Total proof generation
····Start:   Step 0: AIR and channel setup
······End:     Step 0: AIR and channel setup .......................................44.393µs
····Start:   Step 1: Commit to execution trace
lde domain size: 524288
······End:     Step 1: Commit to execution trace ...................................39.329s
····Start:   Step 2: Evaluate constraints
······End:     Step 2: Evaluate constraints ........................................101.950ms
····Start:   Step 3: Commit to constraint evaluations
······End:     Step 3: Commit to constraint evaluations ............................8.121s
····Start:   Step 4: Build DEEP composition polynomial
······End:     Step 4: Build DEEP composition polynomial ...........................155.361ms
····Start:   Step 5: Evaluate DEEP composition polynomial
······End:     Step 5: Evaluate DEEP composition polynomial ........................47.116ms
····Start:   Step 6: Compute FRI layers
······End:     Step 6: Compute FRI layers ..........................................1.736s
····Start:   Step 7: Determine query positions
······End:     Step 7: Determine query positions ...................................108.373ms
····Start:   Step 8: Build proof object
······End:     Step 8: Build proof object ..........................................5.303ms
····End:     Total proof generation ................................................49.605s
··End:     Miden STARK proof generation ............................................49.658s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 49.658120232s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................15.465ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 15.47353ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.
