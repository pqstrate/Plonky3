🎯 Demo of New fib2 APIs
========================


🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 64×80
   📝 Writing Miden trace to fib_10_trace_miden.log...
   ✅ Miden trace written to fib_10_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 64×80 -> 64×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 64×80
   📈 Conversion stats:
      Original height: 64
      Padded height: 64 (2^6)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_10_trace_p3.log...
   ✅ Plonky3 trace written to fib_10_trace_p3.log
========================
   Using P3 trace (64×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 64×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................27.411µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................13.508ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 64, Quotient domain: 64
····End:     Step 2: Compute quotient polynomial ...................................308.878µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................4.122ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................19.216µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................4.066ms
······Start:   proof of work
········End:     proof of work .....................................................33.212µs
······Start:   query phase
········End:     query phase .......................................................1.306ms
······End:     Produce FRI proof ...................................................5.429ms
····End:     Step 5: Open polynomials ..............................................8.571ms
··End:     Total proof generation ..................................................26.613ms
   • Proof generated in 0.03s

✅ Verifying proof...
   • Verification completed in 71ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (64×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................28.669ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 28.681694ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................989.723µs
   ✅ Proof verification successful!
   ⏱️  Verification time: 998.84µs
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 128×80
   📝 Writing Miden trace to fib_20_trace_miden.log...
   ✅ Miden trace written to fib_20_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 128×80 -> 128×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 128×80
   📈 Conversion stats:
      Original height: 128
      Padded height: 128 (2^7)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_20_trace_p3.log...
   ✅ Plonky3 trace written to fib_20_trace_p3.log
========================
   Using P3 trace (128×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 128×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................17.433µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................25.990ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 128, Quotient domain: 128
····End:     Step 2: Compute quotient polynomial ...................................480.940µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................7.853ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................16.671µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................7.734ms
······Start:   proof of work
········End:     proof of work .....................................................42.830µs
······Start:   query phase
········End:     query phase .......................................................1.286ms
······End:     Produce FRI proof ...................................................9.086ms
····End:     Step 5: Open polynomials ..............................................14.609ms
··End:     Total proof generation ..................................................49.019ms
   • Proof generated in 0.05s

✅ Verifying proof...
   • Verification completed in 81ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (128×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................103.278ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 103.287956ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................1.075ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 1.083709ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 256×80
   📝 Writing Miden trace to fib_40_trace_miden.log...
   ✅ Miden trace written to fib_40_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 256×80 -> 256×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 256×80
   📈 Conversion stats:
      Original height: 256
      Padded height: 256 (2^8)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_40_trace_p3.log...
   ✅ Plonky3 trace written to fib_40_trace_p3.log
========================
   Using P3 trace (256×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 256×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................13.215µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................51.158ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 256, Quotient domain: 256
····End:     Step 2: Compute quotient polynomial ...................................901.738µs
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................15.475ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................17.653µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................15.515ms
······Start:   proof of work
········End:     proof of work .....................................................31.249µs
······Start:   query phase
········End:     query phase .......................................................1.345ms
······End:     Produce FRI proof ...................................................16.915ms
····End:     Step 5: Open polynomials ..............................................27.413ms
··End:     Total proof generation ..................................................95.046ms
   • Proof generated in 0.10s

✅ Verifying proof...
   • Verification completed in 98ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (256×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................68.087ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 68.097011ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................1.210ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 1.218973ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 512×80
   📝 Writing Miden trace to fib_80_trace_miden.log...
   ✅ Miden trace written to fib_80_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 512×80 -> 512×80
   ✅ Conversion completed in 0ms
   📏 Plonky3 trace dimensions: 512×80
   📈 Conversion stats:
      Original height: 512
      Padded height: 512 (2^9)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_80_trace_p3.log...
   ✅ Plonky3 trace written to fib_80_trace_p3.log
========================
   Using P3 trace (512×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 512×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................13.626µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................103.801ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 512, Quotient domain: 512
····End:     Step 2: Compute quotient polynomial ...................................1.765ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................31.014ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................18.134µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................32.559ms
······Start:   proof of work
········End:     proof of work .....................................................64.291µs
······Start:   query phase
········End:     query phase .......................................................1.510ms
······End:     Produce FRI proof ...................................................34.160ms
····End:     Step 5: Open polynomials ..............................................55.369ms
··End:     Total proof generation ..................................................192.086ms
   • Proof generated in 0.19s

✅ Verifying proof...
   • Verification completed in 115ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (512×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................131.921ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 131.932682ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................1.547ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 1.556305ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 1024×80
   📝 Writing Miden trace to fib_160_trace_miden.log...
   ✅ Miden trace written to fib_160_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 1024×80 -> 1024×80
   ✅ Conversion completed in 1ms
   📏 Plonky3 trace dimensions: 1024×80
   📈 Conversion stats:
      Original height: 1024
      Padded height: 1024 (2^10)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_160_trace_p3.log...
   ✅ Plonky3 trace written to fib_160_trace_p3.log
========================
   Using P3 trace (1024×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 1024×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................13.866µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................209.881ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 1024, Quotient domain: 1024
····End:     Step 2: Compute quotient polynomial ...................................3.547ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................62.029ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................17.673µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................61.438ms
······Start:   proof of work
········End:     proof of work .....................................................29.065µs
······Start:   query phase
········End:     query phase .......................................................1.544ms
······End:     Produce FRI proof ...................................................63.035ms
····End:     Step 5: Open polynomials ..............................................103.600ms
··End:     Total proof generation ..................................................379.263ms
   • Proof generated in 0.38s

✅ Verifying proof...
   • Verification completed in 131ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (1024×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................263.804ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 263.817445ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................1.662ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 1.67123ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 2048×80
   📝 Writing Miden trace to fib_320_trace_miden.log...
   ✅ Miden trace written to fib_320_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 2048×80 -> 2048×80
   ✅ Conversion completed in 3ms
   📏 Plonky3 trace dimensions: 2048×80
   📈 Conversion stats:
      Original height: 2048
      Padded height: 2048 (2^11)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_320_trace_p3.log...
   ✅ Plonky3 trace written to fib_320_trace_p3.log
========================
   Using P3 trace (2048×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 2048×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................17.112µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................423.379ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 2048, Quotient domain: 2048
····End:     Step 2: Compute quotient polynomial ...................................7.227ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................124.295ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................17.302µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................122.432ms
······Start:   proof of work
········End:     proof of work .....................................................29.245µs
······Start:   query phase
········End:     query phase .......................................................1.689ms
······End:     Produce FRI proof ...................................................124.178ms
····End:     Step 5: Open polynomials ..............................................204.772ms
··End:     Total proof generation ..................................................760.017ms
   • Proof generated in 0.76s

✅ Verifying proof...
   • Verification completed in 150ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (2048×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................534.807ms
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 534.831291ms
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................1.829ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 1.840547ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 4096×80
   📝 Writing Miden trace to fib_640_trace_miden.log...
   ✅ Miden trace written to fib_640_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 4096×80 -> 4096×80
   ✅ Conversion completed in 6ms
   📏 Plonky3 trace dimensions: 4096×80
   📈 Conversion stats:
      Original height: 4096
      Padded height: 4096 (2^12)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_640_trace_p3.log...
   ✅ Plonky3 trace written to fib_640_trace_p3.log
========================
   Using P3 trace (4096×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 4096×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................24.396µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................862.550ms
··Start:   Step 2: Compute quotient polynomial
Trace domain: 4096, Quotient domain: 4096
····End:     Step 2: Compute quotient polynomial ...................................14.227ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................247.908ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................20.548µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................243.640ms
······Start:   proof of work
········End:     proof of work .....................................................46.106µs
······Start:   query phase
········End:     query phase .......................................................1.817ms
······End:     Produce FRI proof ...................................................245.538ms
····End:     Step 5: Open polynomials ..............................................406.030ms
··End:     Total proof generation ..................................................1.531s
   • Proof generated in 1.53s

✅ Verifying proof...
   • Verification completed in 171ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (4096×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................1.138s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 1.138262258s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................2.164ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 2.174713ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 8192×80
   📝 Writing Miden trace to fib_1280_trace_miden.log...
   ✅ Miden trace written to fib_1280_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 8192×80 -> 8192×80
   ✅ Conversion completed in 14ms
   📏 Plonky3 trace dimensions: 8192×80
   📈 Conversion stats:
      Original height: 8192
      Padded height: 8192 (2^13)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_1280_trace_p3.log...
   ✅ Plonky3 trace written to fib_1280_trace_p3.log
========================
   Using P3 trace (8192×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 8192×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................40.707µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................1.790s
··Start:   Step 2: Compute quotient polynomial
Trace domain: 8192, Quotient domain: 8192
····End:     Step 2: Compute quotient polynomial ...................................29.797ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................513.503ms
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................29.595µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................487.083ms
······Start:   proof of work
········End:     proof of work .....................................................47.368µs
······Start:   query phase
········End:     query phase .......................................................2.062ms
······End:     Produce FRI proof ...................................................489.226ms
····End:     Step 5: Open polynomials ..............................................811.748ms
··End:     Total proof generation ..................................................3.147s
   • Proof generated in 3.15s

✅ Verifying proof...
   • Verification completed in 189ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (8192×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................2.258s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 2.258869381s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................2.451ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 9.965404ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 16384×80
   📝 Writing Miden trace to fib_2560_trace_miden.log...
   ✅ Miden trace written to fib_2560_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 16384×80 -> 16384×80
   ✅ Conversion completed in 27ms
   📏 Plonky3 trace dimensions: 16384×80
   📈 Conversion stats:
      Original height: 16384
      Padded height: 16384 (2^14)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_2560_trace_p3.log...
   ✅ Plonky3 trace written to fib_2560_trace_p3.log
========================
   Using P3 trace (16384×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 16384×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................37.951µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................3.498s
··Start:   Step 2: Compute quotient polynomial
Trace domain: 16384, Quotient domain: 16384
····End:     Step 2: Compute quotient polynomial ...................................57.380ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................1.004s
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................31.379µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................988.697ms
······Start:   proof of work
········End:     proof of work .....................................................31.810µs
······Start:   query phase
········End:     query phase .......................................................2.273ms
······End:     Produce FRI proof ...................................................991.055ms
····End:     Step 5: Open polynomials ..............................................1.630s
··End:     Total proof generation ..................................................6.192s
   • Proof generated in 6.19s

✅ Verifying proof...
   • Verification completed in 211ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (16384×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................4.659s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 4.659162257s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................2.589ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 2.602624ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 32768×80
   📝 Writing Miden trace to fib_5120_trace_miden.log...
   ✅ Miden trace written to fib_5120_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 32768×80 -> 32768×80
   ✅ Conversion completed in 61ms
   📏 Plonky3 trace dimensions: 32768×80
   📈 Conversion stats:
      Original height: 32768
      Padded height: 32768 (2^15)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_5120_trace_p3.log...
   ✅ Plonky3 trace written to fib_5120_trace_p3.log
========================
   Using P3 trace (32768×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 32768×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................39.444µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................7.136s
··Start:   Step 2: Compute quotient polynomial
Trace domain: 32768, Quotient domain: 32768
····End:     Step 2: Compute quotient polynomial ...................................115.933ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................1.987s
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................30.547µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................1.951s
······Start:   proof of work
········End:     proof of work .....................................................32.401µs
······Start:   query phase
········End:     query phase .......................................................2.650ms
······End:     Produce FRI proof ...................................................1.954s
····End:     Step 5: Open polynomials ..............................................3.242s
··End:     Total proof generation ..................................................12.487s
   • Proof generated in 12.49s

✅ Verifying proof...
   • Verification completed in 235ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (32768×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................9.555s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 9.555294904s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................2.884ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 9.931141ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.

🔐 Generating proof from Plonky3 trace...
🚀 Generating trace using Miden VM execution...
   📝 Assembling Miden program...
   ▶️  Executing Miden program...
   ✅ Miden execution completed
   📏 Original trace dimensions: 65536×80
   📝 Writing Miden trace to fib_10240_trace_miden.log...
   ✅ Miden trace written to fib_10240_trace_miden.log
   🔄 Converting trace to Plonky3 format...
Converting trace: 65536×80 -> 65536×80
   ✅ Conversion completed in 148ms
   📏 Plonky3 trace dimensions: 65536×80
   📈 Conversion stats:
      Original height: 65536
      Padded height: 65536 (2^16)
      Padding rows added: 0
   📝 Writing Plonky3 trace to fib_10240_trace_p3.log...
   ✅ Plonky3 trace written to fib_10240_trace_p3.log
========================
   Using P3 trace (65536×80) for proof generation...
========================
🔐 Generating Plonky3 STARK proof with simple increment constraint...
   • Creating synthetic trace: 64×4
   • P3 trace dimensions: 65536×80
   • First few values in column 0 (should increment):
     Row 0: 0
     Row 1: 1
     Row 2: 2
     Row 3: 3
     Row 4: 4
     Row 5: 5
     Row 6: 6
     Row 7: 7

🏗️  Using synthetic increment AIR with constraint: trace[i][0] = trace[i-1][0] + 1

🔐 Generating proof...
Start:   Total proof generation
··Start:   Step 0: Instance setup
····End:     Step 0: Instance setup ................................................40.837µs
··Start:   Step 1: Commit to execution trace
····End:     Step 1: Commit to execution trace .....................................14.292s
··Start:   Step 2: Compute quotient polynomial
Trace domain: 65536, Quotient domain: 65536
····End:     Step 2: Compute quotient polynomial ...................................234.975ms
··Start:   Step 3: Commit to quotient polynomial
····End:     Step 3: Commit to quotient polynomial .................................4.018s
··Start:   Step 4: Sample out-of-domain point
····End:     Step 4: Sample out-of-domain point ....................................30.537µs
··Start:   Step 5: Open polynomials
····Start:   Produce FRI proof
input poly len: 1
······Start:   commit phase
········End:     commit phase ......................................................3.916s
······Start:   proof of work
········End:     proof of work .....................................................32.060µs
······Start:   query phase
········End:     query phase .......................................................3.031ms
······End:     Produce FRI proof ...................................................3.919s
····End:     Step 5: Open polynomials ..............................................6.491s
··End:     Total proof generation ..................................................25.047s
   • Proof generated in 25.05s

✅ Verifying proof...
   • Verification completed in 263ms
   • ✅ Proof is valid!

🎉 Successfully proved the increment constraint using Plonky3!
   • Constraint: trace[i][0] = trace[i-1][0] + 1 for all transitions
   ✅ P3 proof generation successful!
========================
   Using Miden trace (65536×80) for proof generation...
========================
🔐 Generating native Miden STARK proof...
Start:   Miden STARK proof generation
··End:     Miden STARK proof generation ............................................19.516s
   ✅ Miden proof generated successfully!
   📊 Proof generation time: 19.516517553s
   🔢 Final result on stack: StackOutputs { elements: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
   🔍 Verifying Miden proof...
Start:   Miden proof verification
··End:     Miden proof verification ................................................3.094ms
   ✅ Proof verification successful!
   ⏱️  Verification time: 3.108333ms
   🔒 Security level: 96 bits
   🎉 Successfully generated and verified native Miden STARK proof!
   ✅ Miden proof generation successful!

🎉 All API demos completed!
   Check the generated fib_*_trace_*.log files to see the traces.
